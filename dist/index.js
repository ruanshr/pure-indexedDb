(()=>{"use strict";var __webpack_modules__={735:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.IndexedDb = exports.getIndexedDbInstance = void 0;\n/**\n * 获取window.indexedDb\n * @returns\n */\nfunction getIndexedDb() {\n    return window.indexedDB;\n}\nconst indexedDbCache = new Map();\n/**\n * 获取indexedDb\n * @param dbOptions\n * @returns\n */\nfunction getIndexedDbInstance(dbOptions) {\n    const { dbName, version } = dbOptions;\n    const key = `${dbName}_${version}`;\n    let instance = indexedDbCache.get(key);\n    if (!instance) {\n        instance = new IndexedDb(dbOptions);\n        indexedDbCache.set(key, instance);\n    }\n    return instance;\n}\nexports.getIndexedDbInstance = getIndexedDbInstance;\n/**\n * 移除indexedDb\n * @param dbOptions\n */\nfunction removeIndexedDb(dbOptions) {\n    const { dbName, version } = dbOptions;\n    const key = `${dbName}_${version}`;\n    indexedDbCache.delete(key);\n}\nclass IndexedDb {\n    constructor(param) {\n        this.dbName = ""; // 数据库名称\n        this.version = 1; // 数据库版本\n        this.tableList = []; // 表单列表\n        this.db = null;\n        this.queue = []; // 事务队列，实例化一次以后下次打开页面时数据库自启动\n        const { dbName, version = 1, tables = [] } = param;\n        this.dbName = dbName;\n        this.version = version;\n        this.tableList = tables;\n    }\n    /**\n     * @method 查询\n     * @param {Object}\n     *   @property {String} tableName 表名\n     */\n    queryAll({ tableName }) {\n        let res = [];\n        return this.commitDb(tableName, (transaction) => {\n            return transaction.openCursor();\n        }, "readonly", (e, resolve) => {\n            this.cursorSuccess(e, {\n                condition: () => true,\n                handler: ({ currentValue }) => res.push(currentValue),\n                success: () => resolve(res)\n            });\n        });\n    }\n    /**\n     * @method 查询(返回具体数组)\n     * @param {Object}\n     *   @property {String} tableName 表名\n     *   @property {Function} condition 查询的条件\n     */\n    query({ tableName, condition }) {\n        let res = [];\n        return this.commitDb(tableName, (transacton) => {\n            return transacton.openCursor();\n        }, "readonly", (e, resolve) => {\n            this.cursorSuccess(e, {\n                condition,\n                handler: ({ currentValue }) => res.push(currentValue),\n                success: () => resolve(res)\n            });\n        });\n    }\n    /**\n    * @method 查询满足key条件的个数(返回满足条件的数字个数)\n    * @param {Object}\n    *   @property {String} tableName 表名\n    *   @property {Number|String} key 查询的key\n    *   @property {Object} countCondition 查询条件\n    */\n    count({ tableName, key, countCondition }) {\n        const mapCondition = {\n            equal: IDBKeyRange.only,\n            gt: IDBKeyRange.lowerBound,\n            lt: IDBKeyRange.upperBound,\n            between: IDBKeyRange.bound\n        };\n        return this.commitDb(tableName, (transaction) => {\n            return transaction.index(key).count(mapCondition[countCondition.type](...countCondition.rangeValue));\n        }, "readonly", (e, resolve) => {\n            resolve(e.target.result);\n        });\n    }\n    /**\n     * @method 查询数据(更具表具体属性)返回具体某一个\n     * @param {Object}\n     *   @property {String} tableName 表名\n     *   @property {Number|String} key 名\n     *   @property {Number|String} value 值\n     */\n    queryByKeyValue({ tableName, key, value }) {\n        return this.commitDb(tableName, (transaction) => {\n            return transaction.index(key).get(value);\n        }, "readonly", (e, resolve) => {\n            resolve(e.target.result);\n        });\n    }\n    /**\n     * @method 查询数据（主键值）\n     * @param {Object}\n     *   @property {String} tableName 表名\n     *   @property {Number|String} value 主键值\n     */\n    queryByPrimaryKey({ tableName, value }) {\n        return this.commitDb(tableName, (transaction) => {\n            return transaction.get(value);\n        }, "readonly", (e, resolve) => {\n            resolve(e.target.result);\n        });\n    }\n    /**\n     * @method 修改数据(返回修改的数组)\n     * @param {Object}\n     *   @property {String} tableName 表名\n     *   @property {Function} condition 查询的条件，遍历，与filter类似\n     *      @arg {Object} 每个元素\n     *      @return 条件\n     *   @property {Function} handle 处理函数，接收本条数据的引用，对其修改\n     */\n    update({ tableName, condition, handle }) {\n        let res = [];\n        return this.commitDb(tableName, (transaction) => {\n            return transaction.openCursor();\n        }, "readwrite", (e, resolve) => {\n            this.cursorSuccess(e, {\n                condition,\n                handler: ({ currentValue, cursor }) => {\n                    const value = handle(currentValue);\n                    res.push(value);\n                    cursor.update(value);\n                },\n                success: () => {\n                    resolve(res);\n                }\n            });\n        });\n    }\n    /**\n     * @method 修改某条数据(主键)返回修改的对象\n     * @param {Object}\n     *   @property {String} tableName 表名\n     *   @property {String\\|Number} value 目标主键值\n     *   @property {Function} handle 处理函数，接收本条数据的引用，对其修改\n     */\n    updateByPrimaryKey({ tableName, value, handle }) {\n        return this.commitDb(tableName, (transaction) => {\n            return transaction.openCursor();\n        }, "readwrite", (e, resolve, store) => {\n            const currentValue = e.target.value;\n            if (!currentValue) {\n                resolve(null);\n                return;\n            }\n            const value = handle(currentValue);\n            store.put(value);\n            resolve(value);\n        });\n    }\n    /**\n     * @method 增加数据\n     * @param {Object}\n     *   @property {String} tableName 表名\n     *   @property {Object} data 插入的数据\n     */\n    insert({ tableName, data }) {\n        return this.commitDb(tableName, undefined, "readwrite", (_, resolve, store) => {\n            data instanceof Array ? data.forEach(v => store.put(v)) : store.put(data);\n            resolve();\n        });\n    }\n    /**\n     * @method 删除数据(返回删除数组)\n     * @param {Object}\n     *   @property {String} tableName 表名\n     *   @property {Function} condition 查询的条件，遍历，与filter类似\n     *      @arg {Object} 每个元素\n     *      @return 条件\n     */\n    delete({ tableName, condition }) {\n        let res = [];\n        return this.commitDb(tableName, (transaction) => {\n            return transaction.openCursor();\n        }, "readwrite", (e, resolve) => {\n            this.cursorSuccess(e, {\n                handler: ({ currentValue, cursor }) => {\n                    res.push(currentValue);\n                    cursor.delete();\n                },\n                success: () => {\n                    resolve(res);\n                }\n            });\n        });\n    }\n    /**\n     * @method 删除数据(主键)\n     * @param {Object}\n     *   @property {String} tableName 表名\n     *   @property {String\\|Number} value 目标主键值\n     */\n    deleteByPrimaryKey({ tableName, value }) {\n        return this.commitDb(tableName, (transaction) => transaction.delete(value), "readwrite", (e, resolve) => {\n            resolve();\n        });\n    }\n    /**\n     * @method 打开数据库\n     * @returns\n     */\n    openDb() {\n        return new Promise((resolve, reject) => {\n            const idb = getIndexedDb();\n            const request = idb.open(this.dbName, this.version);\n            request.onerror = (e) => {\n                reject(e);\n            };\n            request.onsuccess = (event) => {\n                this.db = event.target.result;\n                let task;\n                while (task = this.queue.shift()) {\n                    task();\n                }\n                resolve(this);\n            };\n            request.onupgradeneeded = (e) => {\n                this.tableList.forEach((element) => {\n                    this.createTable(e.target.result, element);\n                });\n            };\n        });\n    }\n    /**\n     * @method 关闭数据库\n     * @param  {[type]} db [数据库名称]\n     */\n    closeDb() {\n        return new Promise((resolve, reject) => {\n            try {\n                if (!this.db) {\n                    this.db.close();\n                    this.db = null;\n                    const { dbName, version } = this;\n                    removeIndexedDb({ dbName, version });\n                    resolve(true);\n                }\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    }\n    /**\n     * @method 删除数据库\n     * @param {String}name 数据库名称\n     */\n    deleteDb(name) {\n        return new Promise((resolve, reject) => {\n            const idb = getIndexedDb();\n            const request = idb.deleteDatabase(name);\n            request.onerror = (e) => {\n                reject(e);\n            };\n            request.onsuccess = (e) => {\n                resolve(e);\n            };\n        });\n    }\n    /**\n      * @method 删除表数据\n      * @param {String}name 数据库名称\n      */\n    deleteTable(tableName) {\n        return this.commitDb(tableName, (transaction) => {\n            return transaction.clear();\n        }, "readwrite", (_, resolve) => {\n            resolve();\n        });\n    }\n    createTable(idb, { tableName, option, indexs = [] }) {\n        if (!idb.objectStoreNames.contains(tableName)) {\n            let store = idb.createObjectStore(tableName, option);\n            for (let { key, option } of indexs) {\n                store.createIndex(key, key, option);\n            }\n        }\n    }\n    /**\n     * 提交Db请求\n     * @param {string} tableName  表名\n     * @param {Function} commit 提交具体函数\n     * @param {"readwrite" | "readonly"} mode 事物方式\n     * @param {Function} backF 游标方法\n     */\n    commitDb(tableName, commit, mode = "readwrite", backF) {\n        return new Promise((resolve, reject) => {\n            const task = () => {\n                try {\n                    if (this.db) {\n                        let store = this.db.transaction(tableName, mode).objectStore(tableName);\n                        if (!commit) {\n                            backF === null || backF === void 0 ? void 0 : backF(null, resolve, store);\n                            return;\n                        }\n                        let res = commit(store);\n                        res.onsuccess = (e) => {\n                            if (backF) {\n                                backF(e, resolve, store);\n                            }\n                            else {\n                                resolve(e);\n                            }\n                        };\n                        res.onerror = (e) => {\n                            reject(e);\n                        };\n                    }\n                    else {\n                        reject(new Error("请开启数据库"));\n                    }\n                }\n                catch (e) {\n                    reject(e);\n                }\n            };\n            if (!this.db) {\n                this.queue.push(task);\n            }\n            else {\n                task();\n            }\n        });\n    }\n    /**\n     * @method 游标开启成功,遍历游标\n     * @param e 结果集\n     * @param param\n     *   @property {Function} condition 条件\n     *   @property {Function} handler  满足条件的处理方式\n     *      @arg {Object}\n     *      @property cursor游标\n     *      @property currentValue当前值\n     *   @property {Function} success  游标遍历完执行的方法\n     */\n    cursorSuccess(e, { condition, handler, success }) {\n        const cursor = e.target.result;\n        if (cursor) {\n            const currentValue = cursor.value;\n            if (condition === null || condition === void 0 ? void 0 : condition(currentValue)) {\n                handler({ cursor, currentValue });\n            }\n            cursor.continue();\n        }\n        else {\n            success === null || success === void 0 ? void 0 : success();\n        }\n    }\n}\nexports.IndexedDb = IndexedDb;\n\n\n//# sourceURL=webpack://pure-indexeddb/./src/IndexedDb.ts?')},607:(__unused_webpack_module,exports,__webpack_require__)=>{eval("var __webpack_unused_export__;\n\n__webpack_unused_export__ = ({ value: true });\n__webpack_unused_export__ = __webpack_unused_export__ = void 0;\nconst IndexedDb_1 = __webpack_require__(735);\n/**\n * 初始化函数\n * @param param\n * @returns\n */\nfunction init({ dbName, version = 1, tables = [] }) {\n    const db = getInstance({\n        dbName,\n        version,\n        tables\n    });\n    return db.openDb();\n}\n__webpack_unused_export__ = init;\n/**\n * 获取单例对象\n * @param param\n * @returns\n */\nfunction getInstance(param) {\n    const { dbName, version = 1, tables = [] } = param;\n    const db = (0, IndexedDb_1.getIndexedDbInstance)({\n        dbName,\n        version,\n        tables\n    });\n    return db;\n}\n__webpack_unused_export__ = getInstance;\n\n\n//# sourceURL=webpack://pure-indexeddb/./src/index.ts?")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}var __webpack_exports__=__webpack_require__(607)})();